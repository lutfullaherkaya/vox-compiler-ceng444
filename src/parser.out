Grammar:

Rule 0     S' -> program
Rule 1     program -> var_decls fun_decls free_statements
Rule 2     var_decl -> VAR ID ;
Rule 3     var_decl -> VAR ID ASSIGN init ;
Rule 4     var_decls -> <empty>
Rule 5     var_decls -> var_decls var_decl
Rule 6     fun_decl -> FUN function
Rule 7     fun_decls -> <empty>
Rule 8     fun_decls -> fun_decls fun_decl
Rule 9     free_statement -> compound_stmt
Rule 10    free_statement -> error }
Rule 11    free_statement -> error ;
Rule 12    free_statement -> simple_stmt ;
Rule 13    free_statements -> <empty>
Rule 14    free_statements -> free_statements free_statement
Rule 15    init -> [ exprs_non_empty_w_commas ]
Rule 16    init -> expr
Rule 17    simple_stmt -> return_stmt
Rule 18    simple_stmt -> print_stmt
Rule 19    simple_stmt -> asgn_stmt
Rule 20    compound_stmt -> for_stmt
Rule 21    compound_stmt -> while_stmt
Rule 22    compound_stmt -> if_stmt
Rule 23    statement -> block
Rule 24    statement -> free_statement
Rule 25    statements -> <empty>
Rule 26    statements -> statements statement
Rule 27    asgn_stmt -> ID ASSIGN expr
Rule 28    asgn_stmt -> ID [ aexpr ] ASSIGN expr
Rule 29    print_stmt -> PRINT expr
Rule 30    return_stmt -> RETURN expr
Rule 31    if_stmt -> IF lexpr statement
Rule 32    if_stmt -> IF lexpr statement ELSE statement
Rule 33    while_stmt -> WHILE lexpr statement
Rule 34    for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
Rule 35    _1_asgn_stmt_optional -> asgn_stmt
Rule 36    _1_asgn_stmt_optional -> <empty>
Rule 37    _2_lexpr_optional -> lexpr
Rule 38    _2_lexpr_optional -> <empty>
Rule 39    _3_asgn_stmt_optional -> asgn_stmt
Rule 40    _3_asgn_stmt_optional -> <empty>
Rule 41    block -> { var_decls statements }
Rule 42    expr -> sexpr
Rule 43    expr -> aexpr
Rule 44    expr -> lexpr
Rule 45    exprs_non_empty_w_commas -> expr
Rule 46    exprs_non_empty_w_commas -> exprs_non_empty_w_commas , expr
Rule 47    lexpr -> lterm
Rule 48    lexpr -> lexpr OR lterm
Rule 49    lterm -> lfact
Rule 50    lterm -> lterm AND lfact
Rule 51    lfact -> FALSE
Rule 52    lfact -> TRUE
Rule 53    lfact -> NOT lfact
Rule 54    lfact -> # ID [ aexpr ]
Rule 55    lfact -> # ID
Rule 56    lfact -> ( lexpr )
Rule 57    lfact -> # call
Rule 58    lfact -> cexpr
Rule 59    aexpr -> term
Rule 60    aexpr -> aexpr PLUS term
Rule 61    aexpr -> aexpr MINUS term
Rule 62    term -> fact
Rule 63    term -> term TIMES fact
Rule 64    term -> term DIVIDE fact
Rule 65    fact -> ID
Rule 66    fact -> ID [ aexpr ]
Rule 67    fact -> ( aexpr )
Rule 68    fact -> NUMBER
Rule 69    fact -> call
Rule 70    fact -> MINUS fact
Rule 71    cexpr -> aexpr GT aexpr
Rule 72    cexpr -> aexpr LT aexpr
Rule 73    cexpr -> aexpr GE aexpr
Rule 74    cexpr -> aexpr LE aexpr
Rule 75    cexpr -> aexpr EQ aexpr
Rule 76    cexpr -> aexpr NE aexpr
Rule 77    sexpr -> STRING
Rule 78    arguments -> exprs_non_empty_w_commas
Rule 79    function -> ID ( ) block
Rule 80    function -> ID ( parameters ) block
Rule 81    parameters -> ids_non_empty_w_commas
Rule 82    ids_non_empty_w_commas -> ID
Rule 83    ids_non_empty_w_commas -> ID , ids_non_empty_w_commas
Rule 84    call -> ID ( )
Rule 85    call -> ID ( arguments )

Terminals, with rules where they appear:

#                    : 54 55 57
(                    : 34 56 67 79 80 84 85
)                    : 34 56 67 79 80 84 85
,                    : 46 83
;                    : 2 3 11 12 34 34
AND                  : 50
ASSIGN               : 3 27 28
DIVIDE               : 64
ELSE                 : 32
EQ                   : 75
FALSE                : 51
FOR                  : 34
FUN                  : 6
GE                   : 73
GT                   : 71
ID                   : 2 3 27 28 54 55 65 66 79 80 82 83 84 85
IF                   : 31 32
LE                   : 74
LT                   : 72
MINUS                : 61 70
NE                   : 76
NOT                  : 53
NUMBER               : 68
OR                   : 48
PLUS                 : 60
PRINT                : 29
RETURN               : 30
STRING               : 77
TIMES                : 63
TRUE                 : 52
VAR                  : 2 3
WHILE                : 33
[                    : 15 28 54 66
]                    : 15 28 54 66
error                : 10 11
{                    : 41
}                    : 10 41

Nonterminals, with rules where they appear:

_1_asgn_stmt_optional : 34
_2_lexpr_optional    : 34
_3_asgn_stmt_optional : 34
aexpr                : 28 43 54 60 61 66 67 71 71 72 72 73 73 74 74 75 75 76 76
arguments            : 85
asgn_stmt            : 19 35 39
block                : 23 79 80
call                 : 57 69
cexpr                : 58
compound_stmt        : 9
expr                 : 16 27 28 29 30 45 46
exprs_non_empty_w_commas : 15 46 78
fact                 : 62 63 64 70
for_stmt             : 20
free_statement       : 14 24
free_statements      : 1 14
fun_decl             : 8
fun_decls            : 1 8
function             : 6
ids_non_empty_w_commas : 81 83
if_stmt              : 22
init                 : 3
lexpr                : 31 32 33 37 44 48 56
lfact                : 49 50 53
lterm                : 47 48 50
parameters           : 80
print_stmt           : 18
program              : 0
return_stmt          : 17
sexpr                : 42
simple_stmt          : 12
statement            : 26 31 32 32 33 34
statements           : 26 41
term                 : 59 60 61 63 64
var_decl             : 5
var_decls            : 1 5 41
while_stmt           : 21


state 0

    (0) S' -> . program
    (1) program -> . var_decls fun_decls free_statements
    (4) var_decls -> .
    (5) var_decls -> . var_decls var_decl
    VAR             reduce using rule 4 (var_decls -> .)
    FUN             reduce using rule 4 (var_decls -> .)
    error           reduce using rule 4 (var_decls -> .)
    FOR             reduce using rule 4 (var_decls -> .)
    WHILE           reduce using rule 4 (var_decls -> .)
    IF              reduce using rule 4 (var_decls -> .)
    RETURN          reduce using rule 4 (var_decls -> .)
    PRINT           reduce using rule 4 (var_decls -> .)
    ID              reduce using rule 4 (var_decls -> .)
    $end            reduce using rule 4 (var_decls -> .)

    program                        shift and go to state 1
    var_decls                      shift and go to state 2

state 1

    (0) S' -> program .


state 2

    (1) program -> var_decls . fun_decls free_statements
    (5) var_decls -> var_decls . var_decl
    (7) fun_decls -> .
    (8) fun_decls -> . fun_decls fun_decl
    (2) var_decl -> . VAR ID ;
    (3) var_decl -> . VAR ID ASSIGN init ;
    FUN             reduce using rule 7 (fun_decls -> .)
    error           reduce using rule 7 (fun_decls -> .)
    FOR             reduce using rule 7 (fun_decls -> .)
    WHILE           reduce using rule 7 (fun_decls -> .)
    IF              reduce using rule 7 (fun_decls -> .)
    RETURN          reduce using rule 7 (fun_decls -> .)
    PRINT           reduce using rule 7 (fun_decls -> .)
    ID              reduce using rule 7 (fun_decls -> .)
    $end            reduce using rule 7 (fun_decls -> .)
    VAR             shift and go to state 5

    fun_decls                      shift and go to state 3
    var_decl                       shift and go to state 4

state 3

    (1) program -> var_decls fun_decls . free_statements
    (8) fun_decls -> fun_decls . fun_decl
    (13) free_statements -> .
    (14) free_statements -> . free_statements free_statement
    (6) fun_decl -> . FUN function
    error           reduce using rule 13 (free_statements -> .)
    FOR             reduce using rule 13 (free_statements -> .)
    WHILE           reduce using rule 13 (free_statements -> .)
    IF              reduce using rule 13 (free_statements -> .)
    RETURN          reduce using rule 13 (free_statements -> .)
    PRINT           reduce using rule 13 (free_statements -> .)
    ID              reduce using rule 13 (free_statements -> .)
    $end            reduce using rule 13 (free_statements -> .)
    FUN             shift and go to state 8

    free_statements                shift and go to state 6
    fun_decl                       shift and go to state 7

state 4

    (5) var_decls -> var_decls var_decl .
    VAR             reduce using rule 5 (var_decls -> var_decls var_decl .)
    FUN             reduce using rule 5 (var_decls -> var_decls var_decl .)
    error           reduce using rule 5 (var_decls -> var_decls var_decl .)
    FOR             reduce using rule 5 (var_decls -> var_decls var_decl .)
    WHILE           reduce using rule 5 (var_decls -> var_decls var_decl .)
    IF              reduce using rule 5 (var_decls -> var_decls var_decl .)
    RETURN          reduce using rule 5 (var_decls -> var_decls var_decl .)
    PRINT           reduce using rule 5 (var_decls -> var_decls var_decl .)
    ID              reduce using rule 5 (var_decls -> var_decls var_decl .)
    $end            reduce using rule 5 (var_decls -> var_decls var_decl .)
    }               reduce using rule 5 (var_decls -> var_decls var_decl .)
    {               reduce using rule 5 (var_decls -> var_decls var_decl .)


state 5

    (2) var_decl -> VAR . ID ;
    (3) var_decl -> VAR . ID ASSIGN init ;
    ID              shift and go to state 9


state 6

    (1) program -> var_decls fun_decls free_statements .
    (14) free_statements -> free_statements . free_statement
    (9) free_statement -> . compound_stmt
    (10) free_statement -> . error }
    (11) free_statement -> . error ;
    (12) free_statement -> . simple_stmt ;
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (22) compound_stmt -> . if_stmt
    (17) simple_stmt -> . return_stmt
    (18) simple_stmt -> . print_stmt
    (19) simple_stmt -> . asgn_stmt
    (34) for_stmt -> . FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (33) while_stmt -> . WHILE lexpr statement
    (31) if_stmt -> . IF lexpr statement
    (32) if_stmt -> . IF lexpr statement ELSE statement
    (30) return_stmt -> . RETURN expr
    (29) print_stmt -> . PRINT expr
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    $end            reduce using rule 1 (program -> var_decls fun_decls free_statements .)
    error           shift and go to state 12
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 23
    PRINT           shift and go to state 24
    ID              shift and go to state 25

    free_statement                 shift and go to state 10
    compound_stmt                  shift and go to state 11
    simple_stmt                    shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    if_stmt                        shift and go to state 16
    return_stmt                    shift and go to state 17
    print_stmt                     shift and go to state 18
    asgn_stmt                      shift and go to state 19

state 7

    (8) fun_decls -> fun_decls fun_decl .
    FUN             reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    error           reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    FOR             reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    WHILE           reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    IF              reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    RETURN          reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    PRINT           reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    ID              reduce using rule 8 (fun_decls -> fun_decls fun_decl .)
    $end            reduce using rule 8 (fun_decls -> fun_decls fun_decl .)


state 8

    (6) fun_decl -> FUN . function
    (79) function -> . ID ( ) block
    (80) function -> . ID ( parameters ) block
    ID              shift and go to state 27

    function                       shift and go to state 26

state 9

    (2) var_decl -> VAR ID . ;
    (3) var_decl -> VAR ID . ASSIGN init ;
    ;               shift and go to state 28
    ASSIGN          shift and go to state 29


state 10

    (14) free_statements -> free_statements free_statement .
    error           reduce using rule 14 (free_statements -> free_statements free_statement .)
    FOR             reduce using rule 14 (free_statements -> free_statements free_statement .)
    WHILE           reduce using rule 14 (free_statements -> free_statements free_statement .)
    IF              reduce using rule 14 (free_statements -> free_statements free_statement .)
    RETURN          reduce using rule 14 (free_statements -> free_statements free_statement .)
    PRINT           reduce using rule 14 (free_statements -> free_statements free_statement .)
    ID              reduce using rule 14 (free_statements -> free_statements free_statement .)
    $end            reduce using rule 14 (free_statements -> free_statements free_statement .)


state 11

    (9) free_statement -> compound_stmt .
    error           reduce using rule 9 (free_statement -> compound_stmt .)
    FOR             reduce using rule 9 (free_statement -> compound_stmt .)
    WHILE           reduce using rule 9 (free_statement -> compound_stmt .)
    IF              reduce using rule 9 (free_statement -> compound_stmt .)
    RETURN          reduce using rule 9 (free_statement -> compound_stmt .)
    PRINT           reduce using rule 9 (free_statement -> compound_stmt .)
    ID              reduce using rule 9 (free_statement -> compound_stmt .)
    $end            reduce using rule 9 (free_statement -> compound_stmt .)
    ELSE            reduce using rule 9 (free_statement -> compound_stmt .)
    }               reduce using rule 9 (free_statement -> compound_stmt .)
    {               reduce using rule 9 (free_statement -> compound_stmt .)


state 12

    (10) free_statement -> error . }
    (11) free_statement -> error . ;
    }               shift and go to state 30
    ;               shift and go to state 31


state 13

    (12) free_statement -> simple_stmt . ;
    ;               shift and go to state 32


state 14

    (20) compound_stmt -> for_stmt .
    error           reduce using rule 20 (compound_stmt -> for_stmt .)
    FOR             reduce using rule 20 (compound_stmt -> for_stmt .)
    WHILE           reduce using rule 20 (compound_stmt -> for_stmt .)
    IF              reduce using rule 20 (compound_stmt -> for_stmt .)
    RETURN          reduce using rule 20 (compound_stmt -> for_stmt .)
    PRINT           reduce using rule 20 (compound_stmt -> for_stmt .)
    ID              reduce using rule 20 (compound_stmt -> for_stmt .)
    $end            reduce using rule 20 (compound_stmt -> for_stmt .)
    ELSE            reduce using rule 20 (compound_stmt -> for_stmt .)
    }               reduce using rule 20 (compound_stmt -> for_stmt .)
    {               reduce using rule 20 (compound_stmt -> for_stmt .)


state 15

    (21) compound_stmt -> while_stmt .
    error           reduce using rule 21 (compound_stmt -> while_stmt .)
    FOR             reduce using rule 21 (compound_stmt -> while_stmt .)
    WHILE           reduce using rule 21 (compound_stmt -> while_stmt .)
    IF              reduce using rule 21 (compound_stmt -> while_stmt .)
    RETURN          reduce using rule 21 (compound_stmt -> while_stmt .)
    PRINT           reduce using rule 21 (compound_stmt -> while_stmt .)
    ID              reduce using rule 21 (compound_stmt -> while_stmt .)
    $end            reduce using rule 21 (compound_stmt -> while_stmt .)
    ELSE            reduce using rule 21 (compound_stmt -> while_stmt .)
    }               reduce using rule 21 (compound_stmt -> while_stmt .)
    {               reduce using rule 21 (compound_stmt -> while_stmt .)


state 16

    (22) compound_stmt -> if_stmt .
    error           reduce using rule 22 (compound_stmt -> if_stmt .)
    FOR             reduce using rule 22 (compound_stmt -> if_stmt .)
    WHILE           reduce using rule 22 (compound_stmt -> if_stmt .)
    IF              reduce using rule 22 (compound_stmt -> if_stmt .)
    RETURN          reduce using rule 22 (compound_stmt -> if_stmt .)
    PRINT           reduce using rule 22 (compound_stmt -> if_stmt .)
    ID              reduce using rule 22 (compound_stmt -> if_stmt .)
    $end            reduce using rule 22 (compound_stmt -> if_stmt .)
    ELSE            reduce using rule 22 (compound_stmt -> if_stmt .)
    }               reduce using rule 22 (compound_stmt -> if_stmt .)
    {               reduce using rule 22 (compound_stmt -> if_stmt .)


state 17

    (17) simple_stmt -> return_stmt .
    ;               reduce using rule 17 (simple_stmt -> return_stmt .)


state 18

    (18) simple_stmt -> print_stmt .
    ;               reduce using rule 18 (simple_stmt -> print_stmt .)


state 19

    (19) simple_stmt -> asgn_stmt .
    ;               reduce using rule 19 (simple_stmt -> asgn_stmt .)


state 20

    (34) for_stmt -> FOR . ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (               shift and go to state 33


state 21

    (33) while_stmt -> WHILE . lexpr statement
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    lexpr                          shift and go to state 34
    lterm                          shift and go to state 35
    lfact                          shift and go to state 36
    aexpr                          shift and go to state 42
    call                           shift and go to state 44
    cexpr                          shift and go to state 45
    term                           shift and go to state 46
    fact                           shift and go to state 48

state 22

    (31) if_stmt -> IF . lexpr statement
    (32) if_stmt -> IF . lexpr statement ELSE statement
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    lexpr                          shift and go to state 50
    lterm                          shift and go to state 35
    lfact                          shift and go to state 36
    aexpr                          shift and go to state 42
    call                           shift and go to state 44
    cexpr                          shift and go to state 45
    term                           shift and go to state 46
    fact                           shift and go to state 48

state 23

    (30) return_stmt -> RETURN . expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    expr                           shift and go to state 51
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 24

    (29) print_stmt -> PRINT . expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    expr                           shift and go to state 57
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 25

    (27) asgn_stmt -> ID . ASSIGN expr
    (28) asgn_stmt -> ID . [ aexpr ] ASSIGN expr
    ASSIGN          shift and go to state 58
    [               shift and go to state 59


state 26

    (6) fun_decl -> FUN function .
    FUN             reduce using rule 6 (fun_decl -> FUN function .)
    error           reduce using rule 6 (fun_decl -> FUN function .)
    FOR             reduce using rule 6 (fun_decl -> FUN function .)
    WHILE           reduce using rule 6 (fun_decl -> FUN function .)
    IF              reduce using rule 6 (fun_decl -> FUN function .)
    RETURN          reduce using rule 6 (fun_decl -> FUN function .)
    PRINT           reduce using rule 6 (fun_decl -> FUN function .)
    ID              reduce using rule 6 (fun_decl -> FUN function .)
    $end            reduce using rule 6 (fun_decl -> FUN function .)


state 27

    (79) function -> ID . ( ) block
    (80) function -> ID . ( parameters ) block
    (               shift and go to state 60


state 28

    (2) var_decl -> VAR ID ; .
    VAR             reduce using rule 2 (var_decl -> VAR ID ; .)
    FUN             reduce using rule 2 (var_decl -> VAR ID ; .)
    error           reduce using rule 2 (var_decl -> VAR ID ; .)
    FOR             reduce using rule 2 (var_decl -> VAR ID ; .)
    WHILE           reduce using rule 2 (var_decl -> VAR ID ; .)
    IF              reduce using rule 2 (var_decl -> VAR ID ; .)
    RETURN          reduce using rule 2 (var_decl -> VAR ID ; .)
    PRINT           reduce using rule 2 (var_decl -> VAR ID ; .)
    ID              reduce using rule 2 (var_decl -> VAR ID ; .)
    $end            reduce using rule 2 (var_decl -> VAR ID ; .)
    }               reduce using rule 2 (var_decl -> VAR ID ; .)
    {               reduce using rule 2 (var_decl -> VAR ID ; .)


state 29

    (3) var_decl -> VAR ID ASSIGN . init ;
    (15) init -> . [ exprs_non_empty_w_commas ]
    (16) init -> . expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    [               shift and go to state 62
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    init                           shift and go to state 61
    expr                           shift and go to state 63
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 30

    (10) free_statement -> error } .
    error           reduce using rule 10 (free_statement -> error } .)
    FOR             reduce using rule 10 (free_statement -> error } .)
    WHILE           reduce using rule 10 (free_statement -> error } .)
    IF              reduce using rule 10 (free_statement -> error } .)
    RETURN          reduce using rule 10 (free_statement -> error } .)
    PRINT           reduce using rule 10 (free_statement -> error } .)
    ID              reduce using rule 10 (free_statement -> error } .)
    $end            reduce using rule 10 (free_statement -> error } .)
    ELSE            reduce using rule 10 (free_statement -> error } .)
    }               reduce using rule 10 (free_statement -> error } .)
    {               reduce using rule 10 (free_statement -> error } .)


state 31

    (11) free_statement -> error ; .
    error           reduce using rule 11 (free_statement -> error ; .)
    FOR             reduce using rule 11 (free_statement -> error ; .)
    WHILE           reduce using rule 11 (free_statement -> error ; .)
    IF              reduce using rule 11 (free_statement -> error ; .)
    RETURN          reduce using rule 11 (free_statement -> error ; .)
    PRINT           reduce using rule 11 (free_statement -> error ; .)
    ID              reduce using rule 11 (free_statement -> error ; .)
    $end            reduce using rule 11 (free_statement -> error ; .)
    ELSE            reduce using rule 11 (free_statement -> error ; .)
    }               reduce using rule 11 (free_statement -> error ; .)
    {               reduce using rule 11 (free_statement -> error ; .)


state 32

    (12) free_statement -> simple_stmt ; .
    error           reduce using rule 12 (free_statement -> simple_stmt ; .)
    FOR             reduce using rule 12 (free_statement -> simple_stmt ; .)
    WHILE           reduce using rule 12 (free_statement -> simple_stmt ; .)
    IF              reduce using rule 12 (free_statement -> simple_stmt ; .)
    RETURN          reduce using rule 12 (free_statement -> simple_stmt ; .)
    PRINT           reduce using rule 12 (free_statement -> simple_stmt ; .)
    ID              reduce using rule 12 (free_statement -> simple_stmt ; .)
    $end            reduce using rule 12 (free_statement -> simple_stmt ; .)
    ELSE            reduce using rule 12 (free_statement -> simple_stmt ; .)
    }               reduce using rule 12 (free_statement -> simple_stmt ; .)
    {               reduce using rule 12 (free_statement -> simple_stmt ; .)


state 33

    (34) for_stmt -> FOR ( . _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (35) _1_asgn_stmt_optional -> . asgn_stmt
    (36) _1_asgn_stmt_optional -> .
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    ;               reduce using rule 36 (_1_asgn_stmt_optional -> .)
    ID              shift and go to state 25

    _1_asgn_stmt_optional          shift and go to state 64
    asgn_stmt                      shift and go to state 65

state 34

    (33) while_stmt -> WHILE lexpr . statement
    (48) lexpr -> lexpr . OR lterm
    (23) statement -> . block
    (24) statement -> . free_statement
    (41) block -> . { var_decls statements }
    (9) free_statement -> . compound_stmt
    (10) free_statement -> . error }
    (11) free_statement -> . error ;
    (12) free_statement -> . simple_stmt ;
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (22) compound_stmt -> . if_stmt
    (17) simple_stmt -> . return_stmt
    (18) simple_stmt -> . print_stmt
    (19) simple_stmt -> . asgn_stmt
    (34) for_stmt -> . FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (33) while_stmt -> . WHILE lexpr statement
    (31) if_stmt -> . IF lexpr statement
    (32) if_stmt -> . IF lexpr statement ELSE statement
    (30) return_stmt -> . RETURN expr
    (29) print_stmt -> . PRINT expr
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    OR              shift and go to state 67
    {               shift and go to state 70
    error           shift and go to state 12
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 23
    PRINT           shift and go to state 24
    ID              shift and go to state 25

    statement                      shift and go to state 66
    block                          shift and go to state 68
    free_statement                 shift and go to state 69
    compound_stmt                  shift and go to state 11
    simple_stmt                    shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    if_stmt                        shift and go to state 16
    return_stmt                    shift and go to state 17
    print_stmt                     shift and go to state 18
    asgn_stmt                      shift and go to state 19

state 35

    (47) lexpr -> lterm .
    (50) lterm -> lterm . AND lfact
    OR              reduce using rule 47 (lexpr -> lterm .)
    {               reduce using rule 47 (lexpr -> lterm .)
    error           reduce using rule 47 (lexpr -> lterm .)
    FOR             reduce using rule 47 (lexpr -> lterm .)
    WHILE           reduce using rule 47 (lexpr -> lterm .)
    IF              reduce using rule 47 (lexpr -> lterm .)
    RETURN          reduce using rule 47 (lexpr -> lterm .)
    PRINT           reduce using rule 47 (lexpr -> lterm .)
    ID              reduce using rule 47 (lexpr -> lterm .)
    ;               reduce using rule 47 (lexpr -> lterm .)
    )               reduce using rule 47 (lexpr -> lterm .)
    ]               reduce using rule 47 (lexpr -> lterm .)
    ,               reduce using rule 47 (lexpr -> lterm .)
    AND             shift and go to state 71


state 36

    (49) lterm -> lfact .
    AND             reduce using rule 49 (lterm -> lfact .)
    OR              reduce using rule 49 (lterm -> lfact .)
    {               reduce using rule 49 (lterm -> lfact .)
    error           reduce using rule 49 (lterm -> lfact .)
    FOR             reduce using rule 49 (lterm -> lfact .)
    WHILE           reduce using rule 49 (lterm -> lfact .)
    IF              reduce using rule 49 (lterm -> lfact .)
    RETURN          reduce using rule 49 (lterm -> lfact .)
    PRINT           reduce using rule 49 (lterm -> lfact .)
    ID              reduce using rule 49 (lterm -> lfact .)
    ;               reduce using rule 49 (lterm -> lfact .)
    )               reduce using rule 49 (lterm -> lfact .)
    ]               reduce using rule 49 (lterm -> lfact .)
    ,               reduce using rule 49 (lterm -> lfact .)


state 37

    (51) lfact -> FALSE .
    AND             reduce using rule 51 (lfact -> FALSE .)
    OR              reduce using rule 51 (lfact -> FALSE .)
    {               reduce using rule 51 (lfact -> FALSE .)
    error           reduce using rule 51 (lfact -> FALSE .)
    FOR             reduce using rule 51 (lfact -> FALSE .)
    WHILE           reduce using rule 51 (lfact -> FALSE .)
    IF              reduce using rule 51 (lfact -> FALSE .)
    RETURN          reduce using rule 51 (lfact -> FALSE .)
    PRINT           reduce using rule 51 (lfact -> FALSE .)
    ID              reduce using rule 51 (lfact -> FALSE .)
    ;               reduce using rule 51 (lfact -> FALSE .)
    )               reduce using rule 51 (lfact -> FALSE .)
    ]               reduce using rule 51 (lfact -> FALSE .)
    ,               reduce using rule 51 (lfact -> FALSE .)


state 38

    (52) lfact -> TRUE .
    AND             reduce using rule 52 (lfact -> TRUE .)
    OR              reduce using rule 52 (lfact -> TRUE .)
    {               reduce using rule 52 (lfact -> TRUE .)
    error           reduce using rule 52 (lfact -> TRUE .)
    FOR             reduce using rule 52 (lfact -> TRUE .)
    WHILE           reduce using rule 52 (lfact -> TRUE .)
    IF              reduce using rule 52 (lfact -> TRUE .)
    RETURN          reduce using rule 52 (lfact -> TRUE .)
    PRINT           reduce using rule 52 (lfact -> TRUE .)
    ID              reduce using rule 52 (lfact -> TRUE .)
    ;               reduce using rule 52 (lfact -> TRUE .)
    )               reduce using rule 52 (lfact -> TRUE .)
    ]               reduce using rule 52 (lfact -> TRUE .)
    ,               reduce using rule 52 (lfact -> TRUE .)


state 39

    (53) lfact -> NOT . lfact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    lfact                          shift and go to state 72
    aexpr                          shift and go to state 42
    call                           shift and go to state 44
    cexpr                          shift and go to state 45
    term                           shift and go to state 46
    fact                           shift and go to state 48

state 40

    (54) lfact -> # . ID [ aexpr ]
    (55) lfact -> # . ID
    (57) lfact -> # . call
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 73

    call                           shift and go to state 74

state 41

    (65) fact -> ID .
    (66) fact -> ID . [ aexpr ]
    (84) call -> ID . ( )
    (85) call -> ID . ( arguments )
    TIMES           reduce using rule 65 (fact -> ID .)
    DIVIDE          reduce using rule 65 (fact -> ID .)
    GT              reduce using rule 65 (fact -> ID .)
    LT              reduce using rule 65 (fact -> ID .)
    GE              reduce using rule 65 (fact -> ID .)
    LE              reduce using rule 65 (fact -> ID .)
    EQ              reduce using rule 65 (fact -> ID .)
    NE              reduce using rule 65 (fact -> ID .)
    PLUS            reduce using rule 65 (fact -> ID .)
    MINUS           reduce using rule 65 (fact -> ID .)
    ;               reduce using rule 65 (fact -> ID .)
    )               reduce using rule 65 (fact -> ID .)
    ]               reduce using rule 65 (fact -> ID .)
    ,               reduce using rule 65 (fact -> ID .)
    AND             reduce using rule 65 (fact -> ID .)
    OR              reduce using rule 65 (fact -> ID .)
    {               reduce using rule 65 (fact -> ID .)
    error           reduce using rule 65 (fact -> ID .)
    FOR             reduce using rule 65 (fact -> ID .)
    WHILE           reduce using rule 65 (fact -> ID .)
    IF              reduce using rule 65 (fact -> ID .)
    RETURN          reduce using rule 65 (fact -> ID .)
    PRINT           reduce using rule 65 (fact -> ID .)
    ID              reduce using rule 65 (fact -> ID .)
    [               shift and go to state 75
    (               shift and go to state 76


state 42

    (71) cexpr -> aexpr . GT aexpr
    (72) cexpr -> aexpr . LT aexpr
    (73) cexpr -> aexpr . GE aexpr
    (74) cexpr -> aexpr . LE aexpr
    (75) cexpr -> aexpr . EQ aexpr
    (76) cexpr -> aexpr . NE aexpr
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    GT              shift and go to state 77
    LT              shift and go to state 78
    GE              shift and go to state 79
    LE              shift and go to state 80
    EQ              shift and go to state 81
    NE              shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 43

    (56) lfact -> ( . lexpr )
    (67) fact -> ( . aexpr )
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    lexpr                          shift and go to state 85
    aexpr                          shift and go to state 86
    lterm                          shift and go to state 35
    term                           shift and go to state 46
    lfact                          shift and go to state 36
    fact                           shift and go to state 48
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 44

    (69) fact -> call .
    TIMES           reduce using rule 69 (fact -> call .)
    DIVIDE          reduce using rule 69 (fact -> call .)
    GT              reduce using rule 69 (fact -> call .)
    LT              reduce using rule 69 (fact -> call .)
    GE              reduce using rule 69 (fact -> call .)
    LE              reduce using rule 69 (fact -> call .)
    EQ              reduce using rule 69 (fact -> call .)
    NE              reduce using rule 69 (fact -> call .)
    PLUS            reduce using rule 69 (fact -> call .)
    MINUS           reduce using rule 69 (fact -> call .)
    ;               reduce using rule 69 (fact -> call .)
    )               reduce using rule 69 (fact -> call .)
    ]               reduce using rule 69 (fact -> call .)
    ,               reduce using rule 69 (fact -> call .)
    AND             reduce using rule 69 (fact -> call .)
    OR              reduce using rule 69 (fact -> call .)
    {               reduce using rule 69 (fact -> call .)
    error           reduce using rule 69 (fact -> call .)
    FOR             reduce using rule 69 (fact -> call .)
    WHILE           reduce using rule 69 (fact -> call .)
    IF              reduce using rule 69 (fact -> call .)
    RETURN          reduce using rule 69 (fact -> call .)
    PRINT           reduce using rule 69 (fact -> call .)
    ID              reduce using rule 69 (fact -> call .)


state 45

    (58) lfact -> cexpr .
    AND             reduce using rule 58 (lfact -> cexpr .)
    OR              reduce using rule 58 (lfact -> cexpr .)
    {               reduce using rule 58 (lfact -> cexpr .)
    error           reduce using rule 58 (lfact -> cexpr .)
    FOR             reduce using rule 58 (lfact -> cexpr .)
    WHILE           reduce using rule 58 (lfact -> cexpr .)
    IF              reduce using rule 58 (lfact -> cexpr .)
    RETURN          reduce using rule 58 (lfact -> cexpr .)
    PRINT           reduce using rule 58 (lfact -> cexpr .)
    ID              reduce using rule 58 (lfact -> cexpr .)
    ;               reduce using rule 58 (lfact -> cexpr .)
    )               reduce using rule 58 (lfact -> cexpr .)
    ]               reduce using rule 58 (lfact -> cexpr .)
    ,               reduce using rule 58 (lfact -> cexpr .)


state 46

    (59) aexpr -> term .
    (63) term -> term . TIMES fact
    (64) term -> term . DIVIDE fact
    GT              reduce using rule 59 (aexpr -> term .)
    LT              reduce using rule 59 (aexpr -> term .)
    GE              reduce using rule 59 (aexpr -> term .)
    LE              reduce using rule 59 (aexpr -> term .)
    EQ              reduce using rule 59 (aexpr -> term .)
    NE              reduce using rule 59 (aexpr -> term .)
    PLUS            reduce using rule 59 (aexpr -> term .)
    MINUS           reduce using rule 59 (aexpr -> term .)
    ;               reduce using rule 59 (aexpr -> term .)
    )               reduce using rule 59 (aexpr -> term .)
    ]               reduce using rule 59 (aexpr -> term .)
    ,               reduce using rule 59 (aexpr -> term .)
    AND             reduce using rule 59 (aexpr -> term .)
    OR              reduce using rule 59 (aexpr -> term .)
    {               reduce using rule 59 (aexpr -> term .)
    error           reduce using rule 59 (aexpr -> term .)
    FOR             reduce using rule 59 (aexpr -> term .)
    WHILE           reduce using rule 59 (aexpr -> term .)
    IF              reduce using rule 59 (aexpr -> term .)
    RETURN          reduce using rule 59 (aexpr -> term .)
    PRINT           reduce using rule 59 (aexpr -> term .)
    ID              reduce using rule 59 (aexpr -> term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88


state 47

    (70) fact -> MINUS . fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    fact                           shift and go to state 89
    call                           shift and go to state 44

state 48

    (62) term -> fact .
    TIMES           reduce using rule 62 (term -> fact .)
    DIVIDE          reduce using rule 62 (term -> fact .)
    GT              reduce using rule 62 (term -> fact .)
    LT              reduce using rule 62 (term -> fact .)
    GE              reduce using rule 62 (term -> fact .)
    LE              reduce using rule 62 (term -> fact .)
    EQ              reduce using rule 62 (term -> fact .)
    NE              reduce using rule 62 (term -> fact .)
    PLUS            reduce using rule 62 (term -> fact .)
    MINUS           reduce using rule 62 (term -> fact .)
    ;               reduce using rule 62 (term -> fact .)
    )               reduce using rule 62 (term -> fact .)
    ]               reduce using rule 62 (term -> fact .)
    ,               reduce using rule 62 (term -> fact .)
    AND             reduce using rule 62 (term -> fact .)
    OR              reduce using rule 62 (term -> fact .)
    {               reduce using rule 62 (term -> fact .)
    error           reduce using rule 62 (term -> fact .)
    FOR             reduce using rule 62 (term -> fact .)
    WHILE           reduce using rule 62 (term -> fact .)
    IF              reduce using rule 62 (term -> fact .)
    RETURN          reduce using rule 62 (term -> fact .)
    PRINT           reduce using rule 62 (term -> fact .)
    ID              reduce using rule 62 (term -> fact .)


state 49

    (68) fact -> NUMBER .
    TIMES           reduce using rule 68 (fact -> NUMBER .)
    DIVIDE          reduce using rule 68 (fact -> NUMBER .)
    GT              reduce using rule 68 (fact -> NUMBER .)
    LT              reduce using rule 68 (fact -> NUMBER .)
    GE              reduce using rule 68 (fact -> NUMBER .)
    LE              reduce using rule 68 (fact -> NUMBER .)
    EQ              reduce using rule 68 (fact -> NUMBER .)
    NE              reduce using rule 68 (fact -> NUMBER .)
    PLUS            reduce using rule 68 (fact -> NUMBER .)
    MINUS           reduce using rule 68 (fact -> NUMBER .)
    ;               reduce using rule 68 (fact -> NUMBER .)
    )               reduce using rule 68 (fact -> NUMBER .)
    ]               reduce using rule 68 (fact -> NUMBER .)
    ,               reduce using rule 68 (fact -> NUMBER .)
    AND             reduce using rule 68 (fact -> NUMBER .)
    OR              reduce using rule 68 (fact -> NUMBER .)
    {               reduce using rule 68 (fact -> NUMBER .)
    error           reduce using rule 68 (fact -> NUMBER .)
    FOR             reduce using rule 68 (fact -> NUMBER .)
    WHILE           reduce using rule 68 (fact -> NUMBER .)
    IF              reduce using rule 68 (fact -> NUMBER .)
    RETURN          reduce using rule 68 (fact -> NUMBER .)
    PRINT           reduce using rule 68 (fact -> NUMBER .)
    ID              reduce using rule 68 (fact -> NUMBER .)


state 50

    (31) if_stmt -> IF lexpr . statement
    (32) if_stmt -> IF lexpr . statement ELSE statement
    (48) lexpr -> lexpr . OR lterm
    (23) statement -> . block
    (24) statement -> . free_statement
    (41) block -> . { var_decls statements }
    (9) free_statement -> . compound_stmt
    (10) free_statement -> . error }
    (11) free_statement -> . error ;
    (12) free_statement -> . simple_stmt ;
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (22) compound_stmt -> . if_stmt
    (17) simple_stmt -> . return_stmt
    (18) simple_stmt -> . print_stmt
    (19) simple_stmt -> . asgn_stmt
    (34) for_stmt -> . FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (33) while_stmt -> . WHILE lexpr statement
    (31) if_stmt -> . IF lexpr statement
    (32) if_stmt -> . IF lexpr statement ELSE statement
    (30) return_stmt -> . RETURN expr
    (29) print_stmt -> . PRINT expr
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    OR              shift and go to state 67
    {               shift and go to state 70
    error           shift and go to state 12
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 23
    PRINT           shift and go to state 24
    ID              shift and go to state 25

    statement                      shift and go to state 91
    block                          shift and go to state 68
    free_statement                 shift and go to state 69
    compound_stmt                  shift and go to state 11
    simple_stmt                    shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    if_stmt                        shift and go to state 16
    return_stmt                    shift and go to state 17
    print_stmt                     shift and go to state 18
    asgn_stmt                      shift and go to state 19

state 51

    (30) return_stmt -> RETURN expr .
    ;               reduce using rule 30 (return_stmt -> RETURN expr .)


state 52

    (42) expr -> sexpr .
    ;               reduce using rule 42 (expr -> sexpr .)
    )               reduce using rule 42 (expr -> sexpr .)
    ]               reduce using rule 42 (expr -> sexpr .)
    ,               reduce using rule 42 (expr -> sexpr .)


state 53

    (43) expr -> aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    (71) cexpr -> aexpr . GT aexpr
    (72) cexpr -> aexpr . LT aexpr
    (73) cexpr -> aexpr . GE aexpr
    (74) cexpr -> aexpr . LE aexpr
    (75) cexpr -> aexpr . EQ aexpr
    (76) cexpr -> aexpr . NE aexpr
    ;               reduce using rule 43 (expr -> aexpr .)
    )               reduce using rule 43 (expr -> aexpr .)
    ]               reduce using rule 43 (expr -> aexpr .)
    ,               reduce using rule 43 (expr -> aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    GT              shift and go to state 77
    LT              shift and go to state 78
    GE              shift and go to state 79
    LE              shift and go to state 80
    EQ              shift and go to state 81
    NE              shift and go to state 82


state 54

    (44) expr -> lexpr .
    (48) lexpr -> lexpr . OR lterm
    ;               reduce using rule 44 (expr -> lexpr .)
    )               reduce using rule 44 (expr -> lexpr .)
    ]               reduce using rule 44 (expr -> lexpr .)
    ,               reduce using rule 44 (expr -> lexpr .)
    OR              shift and go to state 67


state 55

    (77) sexpr -> STRING .
    ;               reduce using rule 77 (sexpr -> STRING .)
    )               reduce using rule 77 (sexpr -> STRING .)
    ]               reduce using rule 77 (sexpr -> STRING .)
    ,               reduce using rule 77 (sexpr -> STRING .)


state 56

    (67) fact -> ( . aexpr )
    (56) lfact -> ( . lexpr )
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    aexpr                          shift and go to state 86
    lexpr                          shift and go to state 85
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 57

    (29) print_stmt -> PRINT expr .
    ;               reduce using rule 29 (print_stmt -> PRINT expr .)


state 58

    (27) asgn_stmt -> ID ASSIGN . expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    expr                           shift and go to state 92
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 59

    (28) asgn_stmt -> ID [ . aexpr ] ASSIGN expr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 93
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 60

    (79) function -> ID ( . ) block
    (80) function -> ID ( . parameters ) block
    (81) parameters -> . ids_non_empty_w_commas
    (82) ids_non_empty_w_commas -> . ID
    (83) ids_non_empty_w_commas -> . ID , ids_non_empty_w_commas
    )               shift and go to state 95
    ID              shift and go to state 94

    parameters                     shift and go to state 96
    ids_non_empty_w_commas         shift and go to state 97

state 61

    (3) var_decl -> VAR ID ASSIGN init . ;
    ;               shift and go to state 98


state 62

    (15) init -> [ . exprs_non_empty_w_commas ]
    (45) exprs_non_empty_w_commas -> . expr
    (46) exprs_non_empty_w_commas -> . exprs_non_empty_w_commas , expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    exprs_non_empty_w_commas       shift and go to state 99
    expr                           shift and go to state 100
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 63

    (16) init -> expr .
    ;               reduce using rule 16 (init -> expr .)


state 64

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional . ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    ;               shift and go to state 101


state 65

    (35) _1_asgn_stmt_optional -> asgn_stmt .
    ;               reduce using rule 35 (_1_asgn_stmt_optional -> asgn_stmt .)


state 66

    (33) while_stmt -> WHILE lexpr statement .
    error           reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    FOR             reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    WHILE           reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    IF              reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    RETURN          reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    PRINT           reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    ID              reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    $end            reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    ELSE            reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    }               reduce using rule 33 (while_stmt -> WHILE lexpr statement .)
    {               reduce using rule 33 (while_stmt -> WHILE lexpr statement .)


state 67

    (48) lexpr -> lexpr OR . lterm
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    lterm                          shift and go to state 102
    lfact                          shift and go to state 36
    aexpr                          shift and go to state 42
    call                           shift and go to state 44
    cexpr                          shift and go to state 45
    term                           shift and go to state 46
    fact                           shift and go to state 48

state 68

    (23) statement -> block .
    error           reduce using rule 23 (statement -> block .)
    FOR             reduce using rule 23 (statement -> block .)
    WHILE           reduce using rule 23 (statement -> block .)
    IF              reduce using rule 23 (statement -> block .)
    RETURN          reduce using rule 23 (statement -> block .)
    PRINT           reduce using rule 23 (statement -> block .)
    ID              reduce using rule 23 (statement -> block .)
    $end            reduce using rule 23 (statement -> block .)
    ELSE            reduce using rule 23 (statement -> block .)
    }               reduce using rule 23 (statement -> block .)
    {               reduce using rule 23 (statement -> block .)


state 69

    (24) statement -> free_statement .
    error           reduce using rule 24 (statement -> free_statement .)
    FOR             reduce using rule 24 (statement -> free_statement .)
    WHILE           reduce using rule 24 (statement -> free_statement .)
    IF              reduce using rule 24 (statement -> free_statement .)
    RETURN          reduce using rule 24 (statement -> free_statement .)
    PRINT           reduce using rule 24 (statement -> free_statement .)
    ID              reduce using rule 24 (statement -> free_statement .)
    $end            reduce using rule 24 (statement -> free_statement .)
    ELSE            reduce using rule 24 (statement -> free_statement .)
    }               reduce using rule 24 (statement -> free_statement .)
    {               reduce using rule 24 (statement -> free_statement .)


state 70

    (41) block -> { . var_decls statements }
    (4) var_decls -> .
    (5) var_decls -> . var_decls var_decl
    VAR             reduce using rule 4 (var_decls -> .)
    }               reduce using rule 4 (var_decls -> .)
    {               reduce using rule 4 (var_decls -> .)
    error           reduce using rule 4 (var_decls -> .)
    FOR             reduce using rule 4 (var_decls -> .)
    WHILE           reduce using rule 4 (var_decls -> .)
    IF              reduce using rule 4 (var_decls -> .)
    RETURN          reduce using rule 4 (var_decls -> .)
    PRINT           reduce using rule 4 (var_decls -> .)
    ID              reduce using rule 4 (var_decls -> .)

    var_decls                      shift and go to state 103

state 71

    (50) lterm -> lterm AND . lfact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    lfact                          shift and go to state 104
    aexpr                          shift and go to state 42
    call                           shift and go to state 44
    cexpr                          shift and go to state 45
    term                           shift and go to state 46
    fact                           shift and go to state 48

state 72

    (53) lfact -> NOT lfact .
    AND             reduce using rule 53 (lfact -> NOT lfact .)
    OR              reduce using rule 53 (lfact -> NOT lfact .)
    {               reduce using rule 53 (lfact -> NOT lfact .)
    error           reduce using rule 53 (lfact -> NOT lfact .)
    FOR             reduce using rule 53 (lfact -> NOT lfact .)
    WHILE           reduce using rule 53 (lfact -> NOT lfact .)
    IF              reduce using rule 53 (lfact -> NOT lfact .)
    RETURN          reduce using rule 53 (lfact -> NOT lfact .)
    PRINT           reduce using rule 53 (lfact -> NOT lfact .)
    ID              reduce using rule 53 (lfact -> NOT lfact .)
    ;               reduce using rule 53 (lfact -> NOT lfact .)
    )               reduce using rule 53 (lfact -> NOT lfact .)
    ]               reduce using rule 53 (lfact -> NOT lfact .)
    ,               reduce using rule 53 (lfact -> NOT lfact .)


state 73

    (54) lfact -> # ID . [ aexpr ]
    (55) lfact -> # ID .
    (84) call -> ID . ( )
    (85) call -> ID . ( arguments )
    [               shift and go to state 105
    AND             reduce using rule 55 (lfact -> # ID .)
    OR              reduce using rule 55 (lfact -> # ID .)
    {               reduce using rule 55 (lfact -> # ID .)
    error           reduce using rule 55 (lfact -> # ID .)
    FOR             reduce using rule 55 (lfact -> # ID .)
    WHILE           reduce using rule 55 (lfact -> # ID .)
    IF              reduce using rule 55 (lfact -> # ID .)
    RETURN          reduce using rule 55 (lfact -> # ID .)
    PRINT           reduce using rule 55 (lfact -> # ID .)
    ID              reduce using rule 55 (lfact -> # ID .)
    ;               reduce using rule 55 (lfact -> # ID .)
    )               reduce using rule 55 (lfact -> # ID .)
    ]               reduce using rule 55 (lfact -> # ID .)
    ,               reduce using rule 55 (lfact -> # ID .)
    (               shift and go to state 76


state 74

    (57) lfact -> # call .
    AND             reduce using rule 57 (lfact -> # call .)
    OR              reduce using rule 57 (lfact -> # call .)
    {               reduce using rule 57 (lfact -> # call .)
    error           reduce using rule 57 (lfact -> # call .)
    FOR             reduce using rule 57 (lfact -> # call .)
    WHILE           reduce using rule 57 (lfact -> # call .)
    IF              reduce using rule 57 (lfact -> # call .)
    RETURN          reduce using rule 57 (lfact -> # call .)
    PRINT           reduce using rule 57 (lfact -> # call .)
    ID              reduce using rule 57 (lfact -> # call .)
    ;               reduce using rule 57 (lfact -> # call .)
    )               reduce using rule 57 (lfact -> # call .)
    ]               reduce using rule 57 (lfact -> # call .)
    ,               reduce using rule 57 (lfact -> # call .)


state 75

    (66) fact -> ID [ . aexpr ]
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 106
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 76

    (84) call -> ID ( . )
    (85) call -> ID ( . arguments )
    (78) arguments -> . exprs_non_empty_w_commas
    (45) exprs_non_empty_w_commas -> . expr
    (46) exprs_non_empty_w_commas -> . exprs_non_empty_w_commas , expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    )               shift and go to state 107
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    arguments                      shift and go to state 108
    exprs_non_empty_w_commas       shift and go to state 109
    expr                           shift and go to state 100
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 77

    (71) cexpr -> aexpr GT . aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 110
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 78

    (72) cexpr -> aexpr LT . aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 111
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 79

    (73) cexpr -> aexpr GE . aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 112
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 80

    (74) cexpr -> aexpr LE . aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 113
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 81

    (75) cexpr -> aexpr EQ . aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 114
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 82

    (76) cexpr -> aexpr NE . aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 115
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 83

    (60) aexpr -> aexpr PLUS . term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    term                           shift and go to state 116
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 84

    (61) aexpr -> aexpr MINUS . term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    term                           shift and go to state 117
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 85

    (56) lfact -> ( lexpr . )
    (48) lexpr -> lexpr . OR lterm
    )               shift and go to state 118
    OR              shift and go to state 67


state 86

    (67) fact -> ( aexpr . )
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    (71) cexpr -> aexpr . GT aexpr
    (72) cexpr -> aexpr . LT aexpr
    (73) cexpr -> aexpr . GE aexpr
    (74) cexpr -> aexpr . LE aexpr
    (75) cexpr -> aexpr . EQ aexpr
    (76) cexpr -> aexpr . NE aexpr
    )               shift and go to state 119
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    GT              shift and go to state 77
    LT              shift and go to state 78
    GE              shift and go to state 79
    LE              shift and go to state 80
    EQ              shift and go to state 81
    NE              shift and go to state 82


state 87

    (63) term -> term TIMES . fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    fact                           shift and go to state 120
    call                           shift and go to state 44

state 88

    (64) term -> term DIVIDE . fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    fact                           shift and go to state 121
    call                           shift and go to state 44

state 89

    (70) fact -> MINUS fact .
    TIMES           reduce using rule 70 (fact -> MINUS fact .)
    DIVIDE          reduce using rule 70 (fact -> MINUS fact .)
    GT              reduce using rule 70 (fact -> MINUS fact .)
    LT              reduce using rule 70 (fact -> MINUS fact .)
    GE              reduce using rule 70 (fact -> MINUS fact .)
    LE              reduce using rule 70 (fact -> MINUS fact .)
    EQ              reduce using rule 70 (fact -> MINUS fact .)
    NE              reduce using rule 70 (fact -> MINUS fact .)
    PLUS            reduce using rule 70 (fact -> MINUS fact .)
    MINUS           reduce using rule 70 (fact -> MINUS fact .)
    ;               reduce using rule 70 (fact -> MINUS fact .)
    )               reduce using rule 70 (fact -> MINUS fact .)
    ]               reduce using rule 70 (fact -> MINUS fact .)
    ,               reduce using rule 70 (fact -> MINUS fact .)
    AND             reduce using rule 70 (fact -> MINUS fact .)
    OR              reduce using rule 70 (fact -> MINUS fact .)
    {               reduce using rule 70 (fact -> MINUS fact .)
    error           reduce using rule 70 (fact -> MINUS fact .)
    FOR             reduce using rule 70 (fact -> MINUS fact .)
    WHILE           reduce using rule 70 (fact -> MINUS fact .)
    IF              reduce using rule 70 (fact -> MINUS fact .)
    RETURN          reduce using rule 70 (fact -> MINUS fact .)
    PRINT           reduce using rule 70 (fact -> MINUS fact .)
    ID              reduce using rule 70 (fact -> MINUS fact .)


state 90

    (67) fact -> ( . aexpr )
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 122
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 91

    (31) if_stmt -> IF lexpr statement .
    (32) if_stmt -> IF lexpr statement . ELSE statement
  ! shift/reduce conflict for ELSE resolved as shift
    error           reduce using rule 31 (if_stmt -> IF lexpr statement .)
    FOR             reduce using rule 31 (if_stmt -> IF lexpr statement .)
    WHILE           reduce using rule 31 (if_stmt -> IF lexpr statement .)
    IF              reduce using rule 31 (if_stmt -> IF lexpr statement .)
    RETURN          reduce using rule 31 (if_stmt -> IF lexpr statement .)
    PRINT           reduce using rule 31 (if_stmt -> IF lexpr statement .)
    ID              reduce using rule 31 (if_stmt -> IF lexpr statement .)
    $end            reduce using rule 31 (if_stmt -> IF lexpr statement .)
    }               reduce using rule 31 (if_stmt -> IF lexpr statement .)
    {               reduce using rule 31 (if_stmt -> IF lexpr statement .)
    ELSE            shift and go to state 123


state 92

    (27) asgn_stmt -> ID ASSIGN expr .
    ;               reduce using rule 27 (asgn_stmt -> ID ASSIGN expr .)
    )               reduce using rule 27 (asgn_stmt -> ID ASSIGN expr .)


state 93

    (28) asgn_stmt -> ID [ aexpr . ] ASSIGN expr
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    ]               shift and go to state 124
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 94

    (82) ids_non_empty_w_commas -> ID .
    (83) ids_non_empty_w_commas -> ID . , ids_non_empty_w_commas
    )               reduce using rule 82 (ids_non_empty_w_commas -> ID .)
    ,               shift and go to state 125


state 95

    (79) function -> ID ( ) . block
    (41) block -> . { var_decls statements }
    {               shift and go to state 70

    block                          shift and go to state 126

state 96

    (80) function -> ID ( parameters . ) block
    )               shift and go to state 127


state 97

    (81) parameters -> ids_non_empty_w_commas .
    )               reduce using rule 81 (parameters -> ids_non_empty_w_commas .)


state 98

    (3) var_decl -> VAR ID ASSIGN init ; .
    VAR             reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    FUN             reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    error           reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    FOR             reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    WHILE           reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    IF              reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    RETURN          reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    PRINT           reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    ID              reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    $end            reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    }               reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)
    {               reduce using rule 3 (var_decl -> VAR ID ASSIGN init ; .)


state 99

    (15) init -> [ exprs_non_empty_w_commas . ]
    (46) exprs_non_empty_w_commas -> exprs_non_empty_w_commas . , expr
    ]               shift and go to state 128
    ,               shift and go to state 129


state 100

    (45) exprs_non_empty_w_commas -> expr .
    ]               reduce using rule 45 (exprs_non_empty_w_commas -> expr .)
    ,               reduce using rule 45 (exprs_non_empty_w_commas -> expr .)
    )               reduce using rule 45 (exprs_non_empty_w_commas -> expr .)


state 101

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional ; . _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (37) _2_lexpr_optional -> . lexpr
    (38) _2_lexpr_optional -> .
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ;               reduce using rule 38 (_2_lexpr_optional -> .)
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40
    (               shift and go to state 43
    ID              shift and go to state 41
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    _2_lexpr_optional              shift and go to state 130
    lexpr                          shift and go to state 131
    lterm                          shift and go to state 35
    lfact                          shift and go to state 36
    aexpr                          shift and go to state 42
    call                           shift and go to state 44
    cexpr                          shift and go to state 45
    term                           shift and go to state 46
    fact                           shift and go to state 48

state 102

    (48) lexpr -> lexpr OR lterm .
    (50) lterm -> lterm . AND lfact
    OR              reduce using rule 48 (lexpr -> lexpr OR lterm .)
    {               reduce using rule 48 (lexpr -> lexpr OR lterm .)
    error           reduce using rule 48 (lexpr -> lexpr OR lterm .)
    FOR             reduce using rule 48 (lexpr -> lexpr OR lterm .)
    WHILE           reduce using rule 48 (lexpr -> lexpr OR lterm .)
    IF              reduce using rule 48 (lexpr -> lexpr OR lterm .)
    RETURN          reduce using rule 48 (lexpr -> lexpr OR lterm .)
    PRINT           reduce using rule 48 (lexpr -> lexpr OR lterm .)
    ID              reduce using rule 48 (lexpr -> lexpr OR lterm .)
    ;               reduce using rule 48 (lexpr -> lexpr OR lterm .)
    )               reduce using rule 48 (lexpr -> lexpr OR lterm .)
    ]               reduce using rule 48 (lexpr -> lexpr OR lterm .)
    ,               reduce using rule 48 (lexpr -> lexpr OR lterm .)
    AND             shift and go to state 71


state 103

    (41) block -> { var_decls . statements }
    (5) var_decls -> var_decls . var_decl
    (25) statements -> .
    (26) statements -> . statements statement
    (2) var_decl -> . VAR ID ;
    (3) var_decl -> . VAR ID ASSIGN init ;
    }               reduce using rule 25 (statements -> .)
    {               reduce using rule 25 (statements -> .)
    error           reduce using rule 25 (statements -> .)
    FOR             reduce using rule 25 (statements -> .)
    WHILE           reduce using rule 25 (statements -> .)
    IF              reduce using rule 25 (statements -> .)
    RETURN          reduce using rule 25 (statements -> .)
    PRINT           reduce using rule 25 (statements -> .)
    ID              reduce using rule 25 (statements -> .)
    VAR             shift and go to state 5

    statements                     shift and go to state 132
    var_decl                       shift and go to state 4

state 104

    (50) lterm -> lterm AND lfact .
    AND             reduce using rule 50 (lterm -> lterm AND lfact .)
    OR              reduce using rule 50 (lterm -> lterm AND lfact .)
    {               reduce using rule 50 (lterm -> lterm AND lfact .)
    error           reduce using rule 50 (lterm -> lterm AND lfact .)
    FOR             reduce using rule 50 (lterm -> lterm AND lfact .)
    WHILE           reduce using rule 50 (lterm -> lterm AND lfact .)
    IF              reduce using rule 50 (lterm -> lterm AND lfact .)
    RETURN          reduce using rule 50 (lterm -> lterm AND lfact .)
    PRINT           reduce using rule 50 (lterm -> lterm AND lfact .)
    ID              reduce using rule 50 (lterm -> lterm AND lfact .)
    ;               reduce using rule 50 (lterm -> lterm AND lfact .)
    )               reduce using rule 50 (lterm -> lterm AND lfact .)
    ]               reduce using rule 50 (lterm -> lterm AND lfact .)
    ,               reduce using rule 50 (lterm -> lterm AND lfact .)


state 105

    (54) lfact -> # ID [ . aexpr ]
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    ID              shift and go to state 41
    (               shift and go to state 90
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47

    aexpr                          shift and go to state 133
    term                           shift and go to state 46
    fact                           shift and go to state 48
    call                           shift and go to state 44

state 106

    (66) fact -> ID [ aexpr . ]
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    ]               shift and go to state 134
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 107

    (84) call -> ID ( ) .
    TIMES           reduce using rule 84 (call -> ID ( ) .)
    DIVIDE          reduce using rule 84 (call -> ID ( ) .)
    GT              reduce using rule 84 (call -> ID ( ) .)
    LT              reduce using rule 84 (call -> ID ( ) .)
    GE              reduce using rule 84 (call -> ID ( ) .)
    LE              reduce using rule 84 (call -> ID ( ) .)
    EQ              reduce using rule 84 (call -> ID ( ) .)
    NE              reduce using rule 84 (call -> ID ( ) .)
    PLUS            reduce using rule 84 (call -> ID ( ) .)
    MINUS           reduce using rule 84 (call -> ID ( ) .)
    ;               reduce using rule 84 (call -> ID ( ) .)
    AND             reduce using rule 84 (call -> ID ( ) .)
    OR              reduce using rule 84 (call -> ID ( ) .)
    {               reduce using rule 84 (call -> ID ( ) .)
    error           reduce using rule 84 (call -> ID ( ) .)
    FOR             reduce using rule 84 (call -> ID ( ) .)
    WHILE           reduce using rule 84 (call -> ID ( ) .)
    IF              reduce using rule 84 (call -> ID ( ) .)
    RETURN          reduce using rule 84 (call -> ID ( ) .)
    PRINT           reduce using rule 84 (call -> ID ( ) .)
    ID              reduce using rule 84 (call -> ID ( ) .)
    )               reduce using rule 84 (call -> ID ( ) .)
    ]               reduce using rule 84 (call -> ID ( ) .)
    ,               reduce using rule 84 (call -> ID ( ) .)


state 108

    (85) call -> ID ( arguments . )
    )               shift and go to state 135


state 109

    (78) arguments -> exprs_non_empty_w_commas .
    (46) exprs_non_empty_w_commas -> exprs_non_empty_w_commas . , expr
    )               reduce using rule 78 (arguments -> exprs_non_empty_w_commas .)
    ,               shift and go to state 129


state 110

    (71) cexpr -> aexpr GT aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    AND             reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    OR              reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    {               reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    error           reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    FOR             reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    WHILE           reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    IF              reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    RETURN          reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    PRINT           reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    ID              reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    ;               reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    )               reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    ]               reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    ,               reduce using rule 71 (cexpr -> aexpr GT aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 111

    (72) cexpr -> aexpr LT aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    AND             reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    OR              reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    {               reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    error           reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    FOR             reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    WHILE           reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    IF              reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    RETURN          reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    PRINT           reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    ID              reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    ;               reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    )               reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    ]               reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    ,               reduce using rule 72 (cexpr -> aexpr LT aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 112

    (73) cexpr -> aexpr GE aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    AND             reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    OR              reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    {               reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    error           reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    FOR             reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    WHILE           reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    IF              reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    RETURN          reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    PRINT           reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    ID              reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    ;               reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    )               reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    ]               reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    ,               reduce using rule 73 (cexpr -> aexpr GE aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 113

    (74) cexpr -> aexpr LE aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    AND             reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    OR              reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    {               reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    error           reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    FOR             reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    WHILE           reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    IF              reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    RETURN          reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    PRINT           reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    ID              reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    ;               reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    )               reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    ]               reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    ,               reduce using rule 74 (cexpr -> aexpr LE aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 114

    (75) cexpr -> aexpr EQ aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    AND             reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    OR              reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    {               reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    error           reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    FOR             reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    WHILE           reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    IF              reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    RETURN          reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    PRINT           reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    ID              reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    ;               reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    )               reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    ]               reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    ,               reduce using rule 75 (cexpr -> aexpr EQ aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 115

    (76) cexpr -> aexpr NE aexpr .
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    AND             reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    OR              reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    {               reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    error           reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    FOR             reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    WHILE           reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    IF              reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    RETURN          reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    PRINT           reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    ID              reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    ;               reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    )               reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    ]               reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    ,               reduce using rule 76 (cexpr -> aexpr NE aexpr .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 116

    (60) aexpr -> aexpr PLUS term .
    (63) term -> term . TIMES fact
    (64) term -> term . DIVIDE fact
    GT              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    LT              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    GE              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    LE              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    EQ              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    NE              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    PLUS            reduce using rule 60 (aexpr -> aexpr PLUS term .)
    MINUS           reduce using rule 60 (aexpr -> aexpr PLUS term .)
    ;               reduce using rule 60 (aexpr -> aexpr PLUS term .)
    )               reduce using rule 60 (aexpr -> aexpr PLUS term .)
    ]               reduce using rule 60 (aexpr -> aexpr PLUS term .)
    ,               reduce using rule 60 (aexpr -> aexpr PLUS term .)
    AND             reduce using rule 60 (aexpr -> aexpr PLUS term .)
    OR              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    {               reduce using rule 60 (aexpr -> aexpr PLUS term .)
    error           reduce using rule 60 (aexpr -> aexpr PLUS term .)
    FOR             reduce using rule 60 (aexpr -> aexpr PLUS term .)
    WHILE           reduce using rule 60 (aexpr -> aexpr PLUS term .)
    IF              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    RETURN          reduce using rule 60 (aexpr -> aexpr PLUS term .)
    PRINT           reduce using rule 60 (aexpr -> aexpr PLUS term .)
    ID              reduce using rule 60 (aexpr -> aexpr PLUS term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88


state 117

    (61) aexpr -> aexpr MINUS term .
    (63) term -> term . TIMES fact
    (64) term -> term . DIVIDE fact
    GT              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    LT              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    GE              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    LE              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    EQ              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    NE              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    PLUS            reduce using rule 61 (aexpr -> aexpr MINUS term .)
    MINUS           reduce using rule 61 (aexpr -> aexpr MINUS term .)
    ;               reduce using rule 61 (aexpr -> aexpr MINUS term .)
    )               reduce using rule 61 (aexpr -> aexpr MINUS term .)
    ]               reduce using rule 61 (aexpr -> aexpr MINUS term .)
    ,               reduce using rule 61 (aexpr -> aexpr MINUS term .)
    AND             reduce using rule 61 (aexpr -> aexpr MINUS term .)
    OR              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    {               reduce using rule 61 (aexpr -> aexpr MINUS term .)
    error           reduce using rule 61 (aexpr -> aexpr MINUS term .)
    FOR             reduce using rule 61 (aexpr -> aexpr MINUS term .)
    WHILE           reduce using rule 61 (aexpr -> aexpr MINUS term .)
    IF              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    RETURN          reduce using rule 61 (aexpr -> aexpr MINUS term .)
    PRINT           reduce using rule 61 (aexpr -> aexpr MINUS term .)
    ID              reduce using rule 61 (aexpr -> aexpr MINUS term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88


state 118

    (56) lfact -> ( lexpr ) .
    AND             reduce using rule 56 (lfact -> ( lexpr ) .)
    OR              reduce using rule 56 (lfact -> ( lexpr ) .)
    {               reduce using rule 56 (lfact -> ( lexpr ) .)
    error           reduce using rule 56 (lfact -> ( lexpr ) .)
    FOR             reduce using rule 56 (lfact -> ( lexpr ) .)
    WHILE           reduce using rule 56 (lfact -> ( lexpr ) .)
    IF              reduce using rule 56 (lfact -> ( lexpr ) .)
    RETURN          reduce using rule 56 (lfact -> ( lexpr ) .)
    PRINT           reduce using rule 56 (lfact -> ( lexpr ) .)
    ID              reduce using rule 56 (lfact -> ( lexpr ) .)
    ;               reduce using rule 56 (lfact -> ( lexpr ) .)
    )               reduce using rule 56 (lfact -> ( lexpr ) .)
    ]               reduce using rule 56 (lfact -> ( lexpr ) .)
    ,               reduce using rule 56 (lfact -> ( lexpr ) .)


state 119

    (67) fact -> ( aexpr ) .
    TIMES           reduce using rule 67 (fact -> ( aexpr ) .)
    DIVIDE          reduce using rule 67 (fact -> ( aexpr ) .)
    GT              reduce using rule 67 (fact -> ( aexpr ) .)
    LT              reduce using rule 67 (fact -> ( aexpr ) .)
    GE              reduce using rule 67 (fact -> ( aexpr ) .)
    LE              reduce using rule 67 (fact -> ( aexpr ) .)
    EQ              reduce using rule 67 (fact -> ( aexpr ) .)
    NE              reduce using rule 67 (fact -> ( aexpr ) .)
    PLUS            reduce using rule 67 (fact -> ( aexpr ) .)
    MINUS           reduce using rule 67 (fact -> ( aexpr ) .)
    ;               reduce using rule 67 (fact -> ( aexpr ) .)
    )               reduce using rule 67 (fact -> ( aexpr ) .)
    ]               reduce using rule 67 (fact -> ( aexpr ) .)
    ,               reduce using rule 67 (fact -> ( aexpr ) .)
    AND             reduce using rule 67 (fact -> ( aexpr ) .)
    OR              reduce using rule 67 (fact -> ( aexpr ) .)
    {               reduce using rule 67 (fact -> ( aexpr ) .)
    error           reduce using rule 67 (fact -> ( aexpr ) .)
    FOR             reduce using rule 67 (fact -> ( aexpr ) .)
    WHILE           reduce using rule 67 (fact -> ( aexpr ) .)
    IF              reduce using rule 67 (fact -> ( aexpr ) .)
    RETURN          reduce using rule 67 (fact -> ( aexpr ) .)
    PRINT           reduce using rule 67 (fact -> ( aexpr ) .)
    ID              reduce using rule 67 (fact -> ( aexpr ) .)


state 120

    (63) term -> term TIMES fact .
    TIMES           reduce using rule 63 (term -> term TIMES fact .)
    DIVIDE          reduce using rule 63 (term -> term TIMES fact .)
    GT              reduce using rule 63 (term -> term TIMES fact .)
    LT              reduce using rule 63 (term -> term TIMES fact .)
    GE              reduce using rule 63 (term -> term TIMES fact .)
    LE              reduce using rule 63 (term -> term TIMES fact .)
    EQ              reduce using rule 63 (term -> term TIMES fact .)
    NE              reduce using rule 63 (term -> term TIMES fact .)
    PLUS            reduce using rule 63 (term -> term TIMES fact .)
    MINUS           reduce using rule 63 (term -> term TIMES fact .)
    ;               reduce using rule 63 (term -> term TIMES fact .)
    )               reduce using rule 63 (term -> term TIMES fact .)
    ]               reduce using rule 63 (term -> term TIMES fact .)
    ,               reduce using rule 63 (term -> term TIMES fact .)
    AND             reduce using rule 63 (term -> term TIMES fact .)
    OR              reduce using rule 63 (term -> term TIMES fact .)
    {               reduce using rule 63 (term -> term TIMES fact .)
    error           reduce using rule 63 (term -> term TIMES fact .)
    FOR             reduce using rule 63 (term -> term TIMES fact .)
    WHILE           reduce using rule 63 (term -> term TIMES fact .)
    IF              reduce using rule 63 (term -> term TIMES fact .)
    RETURN          reduce using rule 63 (term -> term TIMES fact .)
    PRINT           reduce using rule 63 (term -> term TIMES fact .)
    ID              reduce using rule 63 (term -> term TIMES fact .)


state 121

    (64) term -> term DIVIDE fact .
    TIMES           reduce using rule 64 (term -> term DIVIDE fact .)
    DIVIDE          reduce using rule 64 (term -> term DIVIDE fact .)
    GT              reduce using rule 64 (term -> term DIVIDE fact .)
    LT              reduce using rule 64 (term -> term DIVIDE fact .)
    GE              reduce using rule 64 (term -> term DIVIDE fact .)
    LE              reduce using rule 64 (term -> term DIVIDE fact .)
    EQ              reduce using rule 64 (term -> term DIVIDE fact .)
    NE              reduce using rule 64 (term -> term DIVIDE fact .)
    PLUS            reduce using rule 64 (term -> term DIVIDE fact .)
    MINUS           reduce using rule 64 (term -> term DIVIDE fact .)
    ;               reduce using rule 64 (term -> term DIVIDE fact .)
    )               reduce using rule 64 (term -> term DIVIDE fact .)
    ]               reduce using rule 64 (term -> term DIVIDE fact .)
    ,               reduce using rule 64 (term -> term DIVIDE fact .)
    AND             reduce using rule 64 (term -> term DIVIDE fact .)
    OR              reduce using rule 64 (term -> term DIVIDE fact .)
    {               reduce using rule 64 (term -> term DIVIDE fact .)
    error           reduce using rule 64 (term -> term DIVIDE fact .)
    FOR             reduce using rule 64 (term -> term DIVIDE fact .)
    WHILE           reduce using rule 64 (term -> term DIVIDE fact .)
    IF              reduce using rule 64 (term -> term DIVIDE fact .)
    RETURN          reduce using rule 64 (term -> term DIVIDE fact .)
    PRINT           reduce using rule 64 (term -> term DIVIDE fact .)
    ID              reduce using rule 64 (term -> term DIVIDE fact .)


state 122

    (67) fact -> ( aexpr . )
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    )               shift and go to state 119
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 123

    (32) if_stmt -> IF lexpr statement ELSE . statement
    (23) statement -> . block
    (24) statement -> . free_statement
    (41) block -> . { var_decls statements }
    (9) free_statement -> . compound_stmt
    (10) free_statement -> . error }
    (11) free_statement -> . error ;
    (12) free_statement -> . simple_stmt ;
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (22) compound_stmt -> . if_stmt
    (17) simple_stmt -> . return_stmt
    (18) simple_stmt -> . print_stmt
    (19) simple_stmt -> . asgn_stmt
    (34) for_stmt -> . FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (33) while_stmt -> . WHILE lexpr statement
    (31) if_stmt -> . IF lexpr statement
    (32) if_stmt -> . IF lexpr statement ELSE statement
    (30) return_stmt -> . RETURN expr
    (29) print_stmt -> . PRINT expr
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    {               shift and go to state 70
    error           shift and go to state 12
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 23
    PRINT           shift and go to state 24
    ID              shift and go to state 25

    statement                      shift and go to state 136
    block                          shift and go to state 68
    free_statement                 shift and go to state 69
    compound_stmt                  shift and go to state 11
    simple_stmt                    shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    if_stmt                        shift and go to state 16
    return_stmt                    shift and go to state 17
    print_stmt                     shift and go to state 18
    asgn_stmt                      shift and go to state 19

state 124

    (28) asgn_stmt -> ID [ aexpr ] . ASSIGN expr
    ASSIGN          shift and go to state 137


state 125

    (83) ids_non_empty_w_commas -> ID , . ids_non_empty_w_commas
    (82) ids_non_empty_w_commas -> . ID
    (83) ids_non_empty_w_commas -> . ID , ids_non_empty_w_commas
    ID              shift and go to state 94

    ids_non_empty_w_commas         shift and go to state 138

state 126

    (79) function -> ID ( ) block .
    FUN             reduce using rule 79 (function -> ID ( ) block .)
    error           reduce using rule 79 (function -> ID ( ) block .)
    FOR             reduce using rule 79 (function -> ID ( ) block .)
    WHILE           reduce using rule 79 (function -> ID ( ) block .)
    IF              reduce using rule 79 (function -> ID ( ) block .)
    RETURN          reduce using rule 79 (function -> ID ( ) block .)
    PRINT           reduce using rule 79 (function -> ID ( ) block .)
    ID              reduce using rule 79 (function -> ID ( ) block .)
    $end            reduce using rule 79 (function -> ID ( ) block .)


state 127

    (80) function -> ID ( parameters ) . block
    (41) block -> . { var_decls statements }
    {               shift and go to state 70

    block                          shift and go to state 139

state 128

    (15) init -> [ exprs_non_empty_w_commas ] .
    ;               reduce using rule 15 (init -> [ exprs_non_empty_w_commas ] .)


state 129

    (46) exprs_non_empty_w_commas -> exprs_non_empty_w_commas , . expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    expr                           shift and go to state 140
    sexpr                          shift and go to state 52
    aexpr                          shift and go to state 53
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 130

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional . ; _3_asgn_stmt_optional ) statement
    ;               shift and go to state 141


state 131

    (37) _2_lexpr_optional -> lexpr .
    (48) lexpr -> lexpr . OR lterm
    ;               reduce using rule 37 (_2_lexpr_optional -> lexpr .)
    OR              shift and go to state 67


state 132

    (41) block -> { var_decls statements . }
    (26) statements -> statements . statement
    (23) statement -> . block
    (24) statement -> . free_statement
    (41) block -> . { var_decls statements }
    (9) free_statement -> . compound_stmt
    (10) free_statement -> . error }
    (11) free_statement -> . error ;
    (12) free_statement -> . simple_stmt ;
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (22) compound_stmt -> . if_stmt
    (17) simple_stmt -> . return_stmt
    (18) simple_stmt -> . print_stmt
    (19) simple_stmt -> . asgn_stmt
    (34) for_stmt -> . FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (33) while_stmt -> . WHILE lexpr statement
    (31) if_stmt -> . IF lexpr statement
    (32) if_stmt -> . IF lexpr statement ELSE statement
    (30) return_stmt -> . RETURN expr
    (29) print_stmt -> . PRINT expr
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    }               shift and go to state 142
    {               shift and go to state 70
    error           shift and go to state 12
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 23
    PRINT           shift and go to state 24
    ID              shift and go to state 25

    statement                      shift and go to state 143
    block                          shift and go to state 68
    free_statement                 shift and go to state 69
    compound_stmt                  shift and go to state 11
    simple_stmt                    shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    if_stmt                        shift and go to state 16
    return_stmt                    shift and go to state 17
    print_stmt                     shift and go to state 18
    asgn_stmt                      shift and go to state 19

state 133

    (54) lfact -> # ID [ aexpr . ]
    (60) aexpr -> aexpr . PLUS term
    (61) aexpr -> aexpr . MINUS term
    ]               shift and go to state 144
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84


state 134

    (66) fact -> ID [ aexpr ] .
    TIMES           reduce using rule 66 (fact -> ID [ aexpr ] .)
    DIVIDE          reduce using rule 66 (fact -> ID [ aexpr ] .)
    GT              reduce using rule 66 (fact -> ID [ aexpr ] .)
    LT              reduce using rule 66 (fact -> ID [ aexpr ] .)
    GE              reduce using rule 66 (fact -> ID [ aexpr ] .)
    LE              reduce using rule 66 (fact -> ID [ aexpr ] .)
    EQ              reduce using rule 66 (fact -> ID [ aexpr ] .)
    NE              reduce using rule 66 (fact -> ID [ aexpr ] .)
    PLUS            reduce using rule 66 (fact -> ID [ aexpr ] .)
    MINUS           reduce using rule 66 (fact -> ID [ aexpr ] .)
    ;               reduce using rule 66 (fact -> ID [ aexpr ] .)
    )               reduce using rule 66 (fact -> ID [ aexpr ] .)
    ]               reduce using rule 66 (fact -> ID [ aexpr ] .)
    ,               reduce using rule 66 (fact -> ID [ aexpr ] .)
    AND             reduce using rule 66 (fact -> ID [ aexpr ] .)
    OR              reduce using rule 66 (fact -> ID [ aexpr ] .)
    {               reduce using rule 66 (fact -> ID [ aexpr ] .)
    error           reduce using rule 66 (fact -> ID [ aexpr ] .)
    FOR             reduce using rule 66 (fact -> ID [ aexpr ] .)
    WHILE           reduce using rule 66 (fact -> ID [ aexpr ] .)
    IF              reduce using rule 66 (fact -> ID [ aexpr ] .)
    RETURN          reduce using rule 66 (fact -> ID [ aexpr ] .)
    PRINT           reduce using rule 66 (fact -> ID [ aexpr ] .)
    ID              reduce using rule 66 (fact -> ID [ aexpr ] .)


state 135

    (85) call -> ID ( arguments ) .
    TIMES           reduce using rule 85 (call -> ID ( arguments ) .)
    DIVIDE          reduce using rule 85 (call -> ID ( arguments ) .)
    GT              reduce using rule 85 (call -> ID ( arguments ) .)
    LT              reduce using rule 85 (call -> ID ( arguments ) .)
    GE              reduce using rule 85 (call -> ID ( arguments ) .)
    LE              reduce using rule 85 (call -> ID ( arguments ) .)
    EQ              reduce using rule 85 (call -> ID ( arguments ) .)
    NE              reduce using rule 85 (call -> ID ( arguments ) .)
    PLUS            reduce using rule 85 (call -> ID ( arguments ) .)
    MINUS           reduce using rule 85 (call -> ID ( arguments ) .)
    ;               reduce using rule 85 (call -> ID ( arguments ) .)
    AND             reduce using rule 85 (call -> ID ( arguments ) .)
    OR              reduce using rule 85 (call -> ID ( arguments ) .)
    {               reduce using rule 85 (call -> ID ( arguments ) .)
    error           reduce using rule 85 (call -> ID ( arguments ) .)
    FOR             reduce using rule 85 (call -> ID ( arguments ) .)
    WHILE           reduce using rule 85 (call -> ID ( arguments ) .)
    IF              reduce using rule 85 (call -> ID ( arguments ) .)
    RETURN          reduce using rule 85 (call -> ID ( arguments ) .)
    PRINT           reduce using rule 85 (call -> ID ( arguments ) .)
    ID              reduce using rule 85 (call -> ID ( arguments ) .)
    )               reduce using rule 85 (call -> ID ( arguments ) .)
    ]               reduce using rule 85 (call -> ID ( arguments ) .)
    ,               reduce using rule 85 (call -> ID ( arguments ) .)


state 136

    (32) if_stmt -> IF lexpr statement ELSE statement .
    error           reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    FOR             reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    WHILE           reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    IF              reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    RETURN          reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    PRINT           reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    ID              reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    $end            reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    ELSE            reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    }               reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)
    {               reduce using rule 32 (if_stmt -> IF lexpr statement ELSE statement .)


state 137

    (28) asgn_stmt -> ID [ aexpr ] ASSIGN . expr
    (42) expr -> . sexpr
    (43) expr -> . aexpr
    (44) expr -> . lexpr
    (77) sexpr -> . STRING
    (59) aexpr -> . term
    (60) aexpr -> . aexpr PLUS term
    (61) aexpr -> . aexpr MINUS term
    (47) lexpr -> . lterm
    (48) lexpr -> . lexpr OR lterm
    (62) term -> . fact
    (63) term -> . term TIMES fact
    (64) term -> . term DIVIDE fact
    (49) lterm -> . lfact
    (50) lterm -> . lterm AND lfact
    (65) fact -> . ID
    (66) fact -> . ID [ aexpr ]
    (67) fact -> . ( aexpr )
    (68) fact -> . NUMBER
    (69) fact -> . call
    (70) fact -> . MINUS fact
    (51) lfact -> . FALSE
    (52) lfact -> . TRUE
    (53) lfact -> . NOT lfact
    (54) lfact -> . # ID [ aexpr ]
    (55) lfact -> . # ID
    (56) lfact -> . ( lexpr )
    (57) lfact -> . # call
    (58) lfact -> . cexpr
    (84) call -> . ID ( )
    (85) call -> . ID ( arguments )
    (71) cexpr -> . aexpr GT aexpr
    (72) cexpr -> . aexpr LT aexpr
    (73) cexpr -> . aexpr GE aexpr
    (74) cexpr -> . aexpr LE aexpr
    (75) cexpr -> . aexpr EQ aexpr
    (76) cexpr -> . aexpr NE aexpr
    STRING          shift and go to state 55
    ID              shift and go to state 41
    (               shift and go to state 56
    NUMBER          shift and go to state 49
    MINUS           shift and go to state 47
    FALSE           shift and go to state 37
    TRUE            shift and go to state 38
    NOT             shift and go to state 39
    #               shift and go to state 40

    aexpr                          shift and go to state 53
    expr                           shift and go to state 145
    sexpr                          shift and go to state 52
    lexpr                          shift and go to state 54
    term                           shift and go to state 46
    lterm                          shift and go to state 35
    fact                           shift and go to state 48
    lfact                          shift and go to state 36
    call                           shift and go to state 44
    cexpr                          shift and go to state 45

state 138

    (83) ids_non_empty_w_commas -> ID , ids_non_empty_w_commas .
    )               reduce using rule 83 (ids_non_empty_w_commas -> ID , ids_non_empty_w_commas .)


state 139

    (80) function -> ID ( parameters ) block .
    FUN             reduce using rule 80 (function -> ID ( parameters ) block .)
    error           reduce using rule 80 (function -> ID ( parameters ) block .)
    FOR             reduce using rule 80 (function -> ID ( parameters ) block .)
    WHILE           reduce using rule 80 (function -> ID ( parameters ) block .)
    IF              reduce using rule 80 (function -> ID ( parameters ) block .)
    RETURN          reduce using rule 80 (function -> ID ( parameters ) block .)
    PRINT           reduce using rule 80 (function -> ID ( parameters ) block .)
    ID              reduce using rule 80 (function -> ID ( parameters ) block .)
    $end            reduce using rule 80 (function -> ID ( parameters ) block .)


state 140

    (46) exprs_non_empty_w_commas -> exprs_non_empty_w_commas , expr .
    ]               reduce using rule 46 (exprs_non_empty_w_commas -> exprs_non_empty_w_commas , expr .)
    ,               reduce using rule 46 (exprs_non_empty_w_commas -> exprs_non_empty_w_commas , expr .)
    )               reduce using rule 46 (exprs_non_empty_w_commas -> exprs_non_empty_w_commas , expr .)


state 141

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; . _3_asgn_stmt_optional ) statement
    (39) _3_asgn_stmt_optional -> . asgn_stmt
    (40) _3_asgn_stmt_optional -> .
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    )               reduce using rule 40 (_3_asgn_stmt_optional -> .)
    ID              shift and go to state 25

    _3_asgn_stmt_optional          shift and go to state 146
    asgn_stmt                      shift and go to state 147

state 142

    (41) block -> { var_decls statements } .
    error           reduce using rule 41 (block -> { var_decls statements } .)
    FOR             reduce using rule 41 (block -> { var_decls statements } .)
    WHILE           reduce using rule 41 (block -> { var_decls statements } .)
    IF              reduce using rule 41 (block -> { var_decls statements } .)
    RETURN          reduce using rule 41 (block -> { var_decls statements } .)
    PRINT           reduce using rule 41 (block -> { var_decls statements } .)
    ID              reduce using rule 41 (block -> { var_decls statements } .)
    $end            reduce using rule 41 (block -> { var_decls statements } .)
    ELSE            reduce using rule 41 (block -> { var_decls statements } .)
    }               reduce using rule 41 (block -> { var_decls statements } .)
    {               reduce using rule 41 (block -> { var_decls statements } .)
    FUN             reduce using rule 41 (block -> { var_decls statements } .)


state 143

    (26) statements -> statements statement .
    }               reduce using rule 26 (statements -> statements statement .)
    {               reduce using rule 26 (statements -> statements statement .)
    error           reduce using rule 26 (statements -> statements statement .)
    FOR             reduce using rule 26 (statements -> statements statement .)
    WHILE           reduce using rule 26 (statements -> statements statement .)
    IF              reduce using rule 26 (statements -> statements statement .)
    RETURN          reduce using rule 26 (statements -> statements statement .)
    PRINT           reduce using rule 26 (statements -> statements statement .)
    ID              reduce using rule 26 (statements -> statements statement .)


state 144

    (54) lfact -> # ID [ aexpr ] .
    AND             reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    OR              reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    {               reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    error           reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    FOR             reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    WHILE           reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    IF              reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    RETURN          reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    PRINT           reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    ID              reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    ;               reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    )               reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    ]               reduce using rule 54 (lfact -> # ID [ aexpr ] .)
    ,               reduce using rule 54 (lfact -> # ID [ aexpr ] .)


state 145

    (28) asgn_stmt -> ID [ aexpr ] ASSIGN expr .
    ;               reduce using rule 28 (asgn_stmt -> ID [ aexpr ] ASSIGN expr .)
    )               reduce using rule 28 (asgn_stmt -> ID [ aexpr ] ASSIGN expr .)


state 146

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional . ) statement
    )               shift and go to state 148


state 147

    (39) _3_asgn_stmt_optional -> asgn_stmt .
    )               reduce using rule 39 (_3_asgn_stmt_optional -> asgn_stmt .)


state 148

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) . statement
    (23) statement -> . block
    (24) statement -> . free_statement
    (41) block -> . { var_decls statements }
    (9) free_statement -> . compound_stmt
    (10) free_statement -> . error }
    (11) free_statement -> . error ;
    (12) free_statement -> . simple_stmt ;
    (20) compound_stmt -> . for_stmt
    (21) compound_stmt -> . while_stmt
    (22) compound_stmt -> . if_stmt
    (17) simple_stmt -> . return_stmt
    (18) simple_stmt -> . print_stmt
    (19) simple_stmt -> . asgn_stmt
    (34) for_stmt -> . FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement
    (33) while_stmt -> . WHILE lexpr statement
    (31) if_stmt -> . IF lexpr statement
    (32) if_stmt -> . IF lexpr statement ELSE statement
    (30) return_stmt -> . RETURN expr
    (29) print_stmt -> . PRINT expr
    (27) asgn_stmt -> . ID ASSIGN expr
    (28) asgn_stmt -> . ID [ aexpr ] ASSIGN expr
    {               shift and go to state 70
    error           shift and go to state 12
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    IF              shift and go to state 22
    RETURN          shift and go to state 23
    PRINT           shift and go to state 24
    ID              shift and go to state 25

    statement                      shift and go to state 149
    block                          shift and go to state 68
    free_statement                 shift and go to state 69
    compound_stmt                  shift and go to state 11
    simple_stmt                    shift and go to state 13
    for_stmt                       shift and go to state 14
    while_stmt                     shift and go to state 15
    if_stmt                        shift and go to state 16
    return_stmt                    shift and go to state 17
    print_stmt                     shift and go to state 18
    asgn_stmt                      shift and go to state 19

state 149

    (34) for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .
    error           reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    FOR             reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    WHILE           reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    IF              reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    RETURN          reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    PRINT           reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    ID              reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    $end            reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    ELSE            reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    }               reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)
    {               reduce using rule 34 (for_stmt -> FOR ( _1_asgn_stmt_optional ; _2_lexpr_optional ; _3_asgn_stmt_optional ) statement .)


Conflicts:

shift/reduce conflict for ELSE in state 91 resolved as shift